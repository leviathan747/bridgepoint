/*
 * generated by Xtext 2.9.2
 */
package org.xtuml.bp.xtext.masl

import com.google.inject.Binder
import com.google.inject.name.Names
import org.eclipse.xtext.naming.IQualifiedNameConverter
import org.eclipse.xtext.resource.IDefaultResourceDescriptionStrategy
import org.eclipse.xtext.resource.containers.IAllContainersState
import org.eclipse.xtext.scoping.IScopeProvider
import org.eclipse.xtext.scoping.impl.AbstractDeclarativeScopeProvider
import org.xtuml.bp.xtext.masl.lib.MASLContainerManager
import org.xtuml.bp.xtext.masl.lib.MASLDelegatingAllContainerState
import org.xtuml.bp.xtext.masl.masl.MaslPackage
import org.xtuml.bp.xtext.masl.parser.MASLValueConverters
import org.xtuml.bp.xtext.masl.scoping.MASLImportScopeProvider
import org.xtuml.bp.xtext.masl.scoping.MASLQualifiedNameConverter
import org.xtuml.bp.xtext.masl.scoping.MASLQualifiedNameProvider
import org.xtuml.bp.xtext.masl.scoping.MASLResourceDescriptionStrategy
import org.xtuml.bp.xtext.masl.maslBase.MaslBasePackage

/**
 * Use this class to register components to be used at runtime / without the Equinox extension registry.
 */
class MASLRuntimeModule extends AbstractMASLRuntimeModule {
	
	override bindIQualifiedNameProvider() {
		MASLQualifiedNameProvider
	}
	
	def Class<? extends IQualifiedNameConverter> bindIQualifiedNameConverter() {
		MASLQualifiedNameConverter
	}
	
	override configureIScopeProviderDelegate(Binder binder) {
		binder.bind(IScopeProvider).annotatedWith(Names.named(AbstractDeclarativeScopeProvider.NAMED_DELEGATE)).to(MASLImportScopeProvider);
	}

	def configureIAllContainersState$Provider(Binder binder) {
		binder.bind(IAllContainersState.Provider)
			.annotatedWith(Names.named(MASLDelegatingAllContainerState.DELEGATE_BINDING))
			.to(super.bindIAllContainersState$Provider)
	}

	override bindIAllContainersState$Provider() {
		MASLDelegatingAllContainerState.Provider
	}
	
	override bindIContainer$Manager() {
		MASLContainerManager
	}
	
	def configureMASLPackage(Binder binder) {
		binder.bind(MaslPackage).toInstance(MaslPackage.eINSTANCE)
	}
	
	def configureMASLBasePackage(Binder binder) {
		binder.bind(MaslBasePackage).toInstance(MaslBasePackage.eINSTANCE)
	}
	
	def Class<? extends IDefaultResourceDescriptionStrategy> bindIDefaultResourceDescriptionStrategy() {
		MASLResourceDescriptionStrategy
	}
	
	override bindIValueConverterService() {
		MASLValueConverters
	}
	
}
